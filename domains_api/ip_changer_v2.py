from dataclasses import dataclass
from getpass import getpass
from typing import Optional

from domains_api.file_handlers import FileHandlers


class UserNotSetupException(Exception):
    def __init__(self):
        message = (
            "User profile has not been set up.\nEither run from the command line to run the user setup wizard, "
            "or manually set domain and password properties in your application.\n"
            "Refer to documentation for further details."
        )
        super().__init__(message)


@dataclass
class User:
    domain: str
    api_key: str
    api_sec: str
    email_notifications: str
    gmail_address: Optional[str] = None
    gmail_app_password: Optional[str] = None
    last_ip: Optional[str] = None

    def set_domain(self, domain: str):
        self.domain = domain

    def set_api_credentials(self, api_key: str, api_sec: str):
        self.api_key = api_key
        self.api_sec = api_sec

    def set_notifications(self, n: str):
        self.email_notifications = n


class IPChanger:

    fh = FileHandlers()

    def __init__(self, argv: Optional[list[str]] = None, cli: bool = False):
        self.user: Optional[User] = None
        self.changed: bool = False
        if argv is not None:
            self.parse_args(argv)

    def load_user(self, cli=False):
        try:
            self.user = self.fh.load_user(self.fh.user_file)
        except Exception:
            if cli is True:
                self.cli_user_setup()
            else:
                raise UserNotSetupException

    @staticmethod
    def get_ip():
        pass

    def check_ip(self):
        self.check_user()
        if self.get_ip() != self.user.last_ip:
            self.changed = True

    def call_api(self, force=False):
        if self.changed or force:
            pass

    def check_user(self):
        if self.user is None:
            raise UserNotSetupException

    def parse_args(self, argv: list[str]):
        opts = parser.parse_args(argv)
        if {'-l', '--load-user', '-i', '--ip'}.difference(argv):
            self.load_user()
        if opts.ip:
            print(self.get_ip())
        if opts.load_user:
            pass

    def cli_user_setup(self):
        print("Performing user profile setup wizard....")
        self.user = User(
            domain=input(
                "What's the domain you wish to monitor? (include subdomain if relevant) "
            ),
            api_key=input("What's the autogenerated API key for this domain? "),
            api_sec=getpass("What's the autogenerated API secret for this domain? "),
            email_notifications=input(
                "Would you like to turn on email notifications for this domain? (You can change this later) "
                "[Y: yes to all; e: errors only; n: no emails] "
            ).lower()
            or "y",
        )
        if self.user.email_notifications != "n":
            self.user.gmail_address = input("What's your gmail address? ")
            self.user.gmail_app_password = getpass("What's your gmail app password? ")
        self.fh.save_user(self.user)
